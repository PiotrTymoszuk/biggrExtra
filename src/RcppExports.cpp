// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Median
double Median(NumericVector x);
RcppExport SEXP _biggrExtra_Median(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Median(x));
    return rcpp_result_gen;
END_RCPP
}
// Quantile
NumericVector Quantile(NumericVector x, NumericVector probs);
RcppExport SEXP _biggrExtra_Quantile(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(Quantile(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// estMC
NumericMatrix estMC(NumericMatrix mc, Function ci_fun, double conf_level, double mu);
RcppExport SEXP _biggrExtra_estMC(SEXP mcSEXP, SEXP ci_funSEXP, SEXP conf_levelSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mc(mcSEXP);
    Rcpp::traits::input_parameter< Function >::type ci_fun(ci_funSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(estMC(mc, ci_fun, conf_level, mu));
    return rcpp_result_gen;
END_RCPP
}
// perci
NumericVector perci(NumericVector theta, double conf_level);
RcppExport SEXP _biggrExtra_perci(SEXP thetaSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(perci(theta, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// bca
NumericVector bca(NumericVector theta, double conf_level);
RcppExport SEXP _biggrExtra_bca(SEXP thetaSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(bca(theta, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// concatenate
IntegerVector concatenate(IntegerVector x, IntegerVector y);
RcppExport SEXP _biggrExtra_concatenate(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(concatenate(x, y));
    return rcpp_result_gen;
END_RCPP
}
// drawNorm
NumericMatrix drawNorm(NumericVector mu, NumericVector sd, double n);
RcppExport SEXP _biggrExtra_drawNorm(SEXP muSEXP, SEXP sdSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(drawNorm(mu, sd, n));
    return rcpp_result_gen;
END_RCPP
}
// vecDraws
NumericMatrix vecDraws(CharacterVector x, int size, int n_iter);
RcppExport SEXP _biggrExtra_vecDraws(SEXP xSEXP, SEXP sizeSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(vecDraws(x, size, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// compareCounts
NumericMatrix compareCounts(NumericMatrix draws, NumericVector n_observed);
RcppExport SEXP _biggrExtra_compareCounts(SEXP drawsSEXP, SEXP n_observedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_observed(n_observedSEXP);
    rcpp_result_gen = Rcpp::wrap(compareCounts(draws, n_observed));
    return rcpp_result_gen;
END_RCPP
}
// simPval
NumericVector simPval(NumericMatrix sim, double mu, bool median_estimate);
RcppExport SEXP _biggrExtra_simPval(SEXP simSEXP, SEXP muSEXP, SEXP median_estimateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sim(simSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< bool >::type median_estimate(median_estimateSEXP);
    rcpp_result_gen = Rcpp::wrap(simPval(sim, mu, median_estimate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_biggrExtra_Median", (DL_FUNC) &_biggrExtra_Median, 1},
    {"_biggrExtra_Quantile", (DL_FUNC) &_biggrExtra_Quantile, 2},
    {"_biggrExtra_estMC", (DL_FUNC) &_biggrExtra_estMC, 4},
    {"_biggrExtra_perci", (DL_FUNC) &_biggrExtra_perci, 2},
    {"_biggrExtra_bca", (DL_FUNC) &_biggrExtra_bca, 2},
    {"_biggrExtra_concatenate", (DL_FUNC) &_biggrExtra_concatenate, 2},
    {"_biggrExtra_drawNorm", (DL_FUNC) &_biggrExtra_drawNorm, 3},
    {"_biggrExtra_vecDraws", (DL_FUNC) &_biggrExtra_vecDraws, 3},
    {"_biggrExtra_compareCounts", (DL_FUNC) &_biggrExtra_compareCounts, 2},
    {"_biggrExtra_simPval", (DL_FUNC) &_biggrExtra_simPval, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_biggrExtra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
